enum TypeCompte {
    COURANT
    EPARGNE
}

enum TypeTransaction {
    DEPOT
    RETRAIT
}

type Query {
    allComptes: [Compte]
    compteById(id: ID): Compte
    totalSolde: SoldeStats
    comptesParType(typeCompte: TypeCompte): [Compte]
    compteTransactions(id: ID): [Transaction]
    transactionStats: TransactionState
}

type Mutation {
    saveCompte(compte: CompteRequest): Compte
    deleteComptes(id: ID): Boolean
    addTransaction(transactionRequest: TransactionRequest): Transaction
}

type Compte {
    id: ID
    solde: Float
    dateCreation: String
    type: TypeCompte
}

type Transaction {
    id: ID
    montant: Float
    date: String
    type: TypeTransaction
    compte: Compte
}

input CompteRequest {
    solde: Float
    dateCreation: String
    type: TypeCompte
}

input TransactionRequest {
    compteId: ID
    montant: Float
    date: String  # Adjusted to String for consistency with GraphQL
    type: TypeTransaction
}

# SoldeStats represents the statistics about accounts
type SoldeStats {
    count: Int
    sum: Float
    average: Float
}

# TransactionState represents the statistics about transactions
type TransactionState {
    count: Int
    sumDepots: Float
    sumRetraits: Float
}
